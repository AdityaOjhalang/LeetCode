{"leetcode":{"easy":5,"hard":0,"medium":11,"shas":{"0515-find-largest-value-in-each-tree-row":{"0515-find-largest-value-in-each-tree-row.py":"2803e610954435b0f1d82d7905d5fffc54ca981b","README.md":"4ab9cf8a8f8c992b2b271843a6033c13dfb3f1b5","difficulty":"medium"},"README.md":{"":"c72c45dc56c42576607b9d75550c8536fda6b011"},"0199-binary-tree-right-side-view":{"0199-binary-tree-right-side-view.py":"bb32df72059bb1aca975153bc4f6a3172cb9d211","README.md":"e0a0eb36c0588f971c130cf6210ba95d294a65d1","difficulty":"medium"},"stats.json":{"":"05f232be93935bb0199459c226d66439f8f5555d"},"1254-deepest-leaves-sum":{"1254-deepest-leaves-sum.py":"6b8ec3a44103f334742f894d5cd13e6e30ef6c90","README.md":"4b46cd6c69e80372efbd5427baeeea913b9daa86","difficulty":"medium"},"0103-binary-tree-zigzag-level-order-traversal":{"0103-binary-tree-zigzag-level-order-traversal.py":"91cdb7b288ae8f61f0f37ec7c8a257ec2a3a54b8","README.md":"fcd20aa2bad60f78f450527d135d90bfbc83d83a","difficulty":"medium"},"0975-range-sum-of-bst":{"0975-range-sum-of-bst.py":"2b985399efc904356d1edec039c0eb36a88f02f7","README.md":"a5fbf1e4b44a22ebc90ed4b11ca72288175ae8b5","difficulty":"easy"},"0530-minimum-absolute-difference-in-bst":{"0530-minimum-absolute-difference-in-bst.py":"d2bb777a0a43b9cef7e16c3082200fb11c5b4a0e","README.md":"d1f78dcffe970a454029a9576602d9d14fea6e17","difficulty":"easy"},"0098-validate-binary-search-tree":{"0098-validate-binary-search-tree.py":"ab70f5a4695904e3818aaa75bf55085e83a7b4d0","README.md":"957fcdbca58c72b7e3fa5e71a94279d6325e4e06","difficulty":"medium"},"0784-insert-into-a-binary-search-tree":{"0784-insert-into-a-binary-search-tree.py":"1731776577ff5229a203861dbc3dc0c5f717a02b","README.md":"f0477736fdf23ae1d38f735c19e178f3f1e507ac","difficulty":"medium"},"0270-closest-binary-search-tree-value":{"0270-closest-binary-search-tree-value.py":"ededb72c55a82e7ea0a6b33ce278a2e597959048","README.md":"7fa4b95f78d485d13bc9992c37f1730ced7b47bf","difficulty":"easy"},"0049-group-anagrams":{"0049-group-anagrams.py":"d0d0827d937fb7bc27e05d36ac2d69fc992f64ec","README.md":"9d4e57a1660ecf3ab6088a2b5784c68ccf5ddbcf","difficulty":"medium"},"0226-invert-binary-tree":{"0226-invert-binary-tree.py":"d078be8eb3706f3e624ece49076261696c32fc56","README.md":"50f4a6354112c1afacef29ffc7209e5f9f7095d8","difficulty":"easy"},"0101-symmetric-tree":{"0101-symmetric-tree.py":"a4f45c18c6cda9e463187993bcadb4bf50a91375","README.md":"1f2113012a39cfbad1ebdddb1b47cba18e5fa452","difficulty":"easy"},"0105-construct-binary-tree-from-preorder-and-inorder-traversal":{"0105-construct-binary-tree-from-preorder-and-inorder-traversal.py":"c7f6b99a9021deb0f2295d19ee87573ef4bcb356","README.md":"75ac83be2e52aa76ea9bd5c9c20537a499cb9ec0","difficulty":"medium"},"0106-construct-binary-tree-from-inorder-and-postorder-traversal":{"0106-construct-binary-tree-from-inorder-and-postorder-traversal.py":"2c2710426851f00597d36d0f55cef3d22e67d914","README.md":"8169bc76429370954eb33bb078940c0a05066e29","difficulty":"medium"},"0117-populating-next-right-pointers-in-each-node-ii":{"0117-populating-next-right-pointers-in-each-node-ii.py":"6ab4f9f17136d8d4edb16bf57ce2efad7294d7cd","README.md":"884e1ff07d0edfb9c52d02ccac4bc0edcc5b0610","difficulty":"medium"},"0114-flatten-binary-tree-to-linked-list":{"0114-flatten-binary-tree-to-linked-list.py":"35636fd5360945bbae9424783003c81bcfe4bc7f","README.md":"581431bf3d62fd3a541ca6eb01543cb6f06b71a8","difficulty":"medium"}},"solved":16}}